# Raytracer CI Workflow
name: Raytracer CI

on:
  push:
    branches: [ "main", "master", "dev" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  check-prerequisites:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check project structure
      run: |
        # Check if essential files/directories exist
        echo "Checking project structure..."

        # Check for required files
        [ -f "CMakeLists.txt" ] || { echo "❌ Missing CMakeLists.txt"; exit 1; }
        [ -f "Makefile" ] || { echo "❌ Missing Makefile"; exit 1; }
        [ -d "src" ] || { echo "❌ Missing src directory"; exit 1; }
        [ -d "include" ] || { echo "❌ Missing include directory"; exit 1; }

        # Check for mandatory interfaces
        [ -f "include/IPrimitive.hpp" ] || { echo "❌ Missing IPrimitive interface"; exit 1; }
        [ -f "include/ILight.hpp" ] || { echo "❌ Missing ILight interface"; exit 1; }

        # Check for primitive implementations
        # FOUND_SPHERE=0
        # FOUND_PLANE=0

        # find . -type f \( -name "*.cpp" -o -name "*.hpp" \) | xargs grep -l "class.*Sphere" > /dev/null && FOUND_SPHERE=1
        # find . -type f \( -name "*.cpp" -o -name "*.hpp" \) | xargs grep -l "class.*Plane" > /dev/null && FOUND_PLANE=1

        # [ $FOUND_SPHERE -eq 1 ] || { echo "❌ Sphere primitive not found"; exit 1; }
        # [ $FOUND_PLANE -eq 1 ] || { echo "❌ Plane primitive not found"; exit 1; }

        # # Check for light implementations
        # FOUND_DIRECTIONAL=0
        # FOUND_AMBIENT=0

        # find . -type f \( -name "*.cpp" -o -name "*.hpp" \) | xargs grep -l "class.*DirectionalLight\|Directional.*Light" > /dev/null && FOUND_DIRECTIONAL=1
        # find . -type f \( -name "*.cpp" -o -name "*.hpp" \) | xargs grep -l "class.*AmbientLight\|Ambient.*Light" > /dev/null && FOUND_AMBIENT=1

        # [ $FOUND_DIRECTIONAL -eq 1 ] || { echo "❌ Directional light not found"; exit 1; }
        # [ $FOUND_AMBIENT -eq 1 ] || { echo "❌ Ambient light not found"; exit 1; }

        echo "✅ All required project components found!"

  build:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check-prerequisites

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y libconfig++-dev libsfml-dev lcov # clang-format is usually included

    - name: Check Code Formatting (clang-format)
      run: |
        echo "Checking code formatting with clang-format..."
        find . -path ./build -prune -o -path ./_deps -prune -o \\( -name "*.cpp" -o -name "*.hpp" \\) -print0 | xargs -0 clang-format --dry-run --Werror
        echo "✅ Code formatting is correct."

    - name: Build with Makefile
      run: |
        echo "Building project with Makefile..."
        make

    - name: Check if binary exists
      run: |
        [ -f "./raytracer" ] || [ -f "./build/src/raytracer" ] || { echo "❌ Binary not built correctly"; exit 1; }
        echo "✅ Binary successfully built!"

    - name: Run tests
      run: |
        echo "Running tests..."
        make tests_run && echo "✅ All tests passed!"

    - name: Generate code coverage
      run: |
        echo "Generating code coverage..."
        make cov && echo "✅ Code coverage generated!"

    - name: Build with CMake directly
      run: |
        echo "Building project with CMake directly..."
        mkdir -p cmake_build
        cd cmake_build
        cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
        cmake --build .

  mirror-to-epitech:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Push to Epitech repository
      uses: pixta-dev/repository-mirroring-action@v1
      with:
        target_repo_url: git@github.com:EpitechPromo2028/B-OOP-400-NAN-4-1-raytracer-mael.perrigaud.git
        ssh_private_key: ${{ secrets.EPITECH_SSH_KEY }}